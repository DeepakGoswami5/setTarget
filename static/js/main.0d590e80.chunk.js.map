{"version":3,"sources":["Components/Header/Header.js","Components/TodoForm/TodoForm.js","Components/Todo/Todo.js","Components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodo","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d590e80.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"header-text\">What are the targets today </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React,{useState,useRef,useEffect} from 'react';\r\nimport './TodoForm.css';\r\n\r\nconst TodoForm = (props) => {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : ''); \r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n    const handleChange = e =>{\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() *1000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    }\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Update Today's Target\"  \r\n                        name=\"text\"\r\n                        value={input}\r\n                        className=\"todo-input edit\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}>\r\n                    </input>\r\n                    <button\r\n                        className=\"todo-button edit\">\r\n                        Update Target\r\n                    </button>\r\n                </>\r\n            ):\r\n            (\r\n                <>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Enter Today's Target\"  \r\n                        name=\"text\"\r\n                        value={input}\r\n                        className=\"todo-input\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}>\r\n                    </input>\r\n                    <button\r\n                        className=\"todo-button\">\r\n                        Add Target\r\n                    </button>\r\n                </>\r\n            )\r\n        }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React,{useState} from 'react';\r\nimport './Todo.css';\r\nimport {FiEdit} from 'react-icons/fi';\r\nimport {AiFillDelete} from 'react-icons/ai'\r\nimport TodoForm from '../TodoForm/TodoForm';\r\n\r\nconst Todo = ({todos,completeTodo,removeTodo,updateTodo}) => {\r\n\r\n    const [edit,setEdit] = useState({\r\n        id:null,\r\n        value:''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id,value)\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        });\r\n    };\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>\r\n    }\r\n    return todos.map((todo,index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={()=> completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <AiFillDelete \r\n                    onClick={()=>removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <FiEdit\r\n                    onClick={()=>setEdit({id:todo.id,value:todo.text})}\r\n                    className='edit-icon'\r\n                />\r\n            </div>\r\n        </div> \r\n    ));\r\n};\r\n\r\nexport default Todo;\r\n","import React,{useState} from 'react';\r\nimport Todo from '../Todo/Todo';\r\nimport TodoForm from '../TodoForm/TodoForm';\r\n\r\nconst TodoList = () => {\r\n    const [todos,setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return;\r\n        }\r\n\r\n        const newTodo = [todo,...todos];\r\n        \r\n        setTodos(newTodo);\r\n\r\n    }\r\n\r\n    const updateTodo = (todoId,newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n        setTodos(prev=>prev.map(item=>(item.id === todoId ? newValue:item)));\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo=>todo.id !== id) \r\n        setTodos(removeArr);\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} \r\n                completeTodo={completeTodo} \r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport Header from './Components/Header/Header';\nimport TodoList from './Components/TodoList/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}